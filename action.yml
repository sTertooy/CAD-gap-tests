name: "Run GAP test suite"
description: "Runs the testintall.g or the teststandard.g script to test the GAP installation"
inputs:
  ONLY_NEEDED:
    description: "Only load necessary packages, not suggested ones, prior to testing"
    required: false
    default: false
  COMPLETE:
    description: "Whether to use testinstall.g or the more complete (but slower) teststandard.g"
    required: false
    default: false
    
runs:
  using: "composite"
  steps:
    - name: "Run GAP test suite"
      shell: bash
      run: |
       set -ex
         
       GAPROOT=/opt/gap
       
       # set up a custom GAP root containing only this package, so that
       # we can force GAP to load the correct version of this package
       mkdir -p /tmp/gaproot/pkg/
       ln -f -s $PWD /tmp/gaproot/pkg/
       
       # start GAP with custom GAP root, to ensure correct package version is loaded
       GAP="$GAPROOT/bin/gap.sh -A ${{ inputs.GAP_FLAGS }} -l /tmp/gaproot; --quitonbreak"
       
       # If turned on by setting the COVERAGE environment variable, we 
       # collect coverage data
       if [ "${{ inputs.COVERAGE }}" == "true" ]; then
           mkdir -p ${COVDIR-coverage}
           GAP="$GAP --cover ${COVDIR-coverage}/$(mktemp XXXXXX).coverage"
       fi
       
       $GAP <<GAPInput
       
       # Decide which test file should be used
       if ${{ inputs.COMPLETE }} then
           testFile := "teststandard.g";
       else
           testFile := "testinstall.g";
       fi;
       
       GAP_TESTFILE := Filename( DirectoriesLibrary( "tst" ), testFile );
       
       Read( "PackageInfo.g" );
       info := GAPInfo.PackageInfoCurrent;
       
       # Load the package with debug info
       SetInfoLevel( InfoPackageLoading, PACKAGE_DEBUG );
       SetPackagePath( info.PackageName, "/tmp/gaproot/pkg/$(basename $PWD)" );
       if ${{ inputs.ONLY_NEEDED }} then
           LoadPackage( info.PackageName : OnlyNeeded );
       else
           LoadPackage( info.PackageName );
       fi;
       SetInfoLevel( InfoPackageLoading, PACKAGE_ERROR );
       

       Read( GAP_TESTFILE );
       GAPInput
